// java methods 2 assignment

// 1. Factors, Sum, Square Sum, Product
import java.util.*;
class FactorAnalysis {
    public static int[] getFactors(int num) {
        int count = 0;
        for (int i = 1; i <= num; i++) if (num % i == 0) count++;
        int[] factors = new int[count];
        int index = 0;
        for (int i = 1; i <= num; i++) if (num % i == 0) factors[index++] = i;
        return factors;
    }

    public static int sum(int[] arr) {
        int sum = 0;
        for (int i : arr) sum += i;
        return sum;
    }

    public static long product(int[] arr) {
        long prod = 1;
        for (int i : arr) prod *= i;
        return prod;
    }

    public static int squareSum(int[] arr) {
        int sum = 0;
        for (int i : arr) sum += Math.pow(i, 2);
        return sum;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int num = sc.nextInt();
        int[] factors = getFactors(num);
        System.out.println("Factors: " + Arrays.toString(factors));
        System.out.println("Sum: " + sum(factors));
        System.out.println("Square Sum: " + squareSum(factors));
        System.out.println("Product: " + product(factors));
    }
}

// 2. Recursive and Formula sum
class RecursiveSum {
    public static int recursiveSum(int n) {
        if (n == 1) return 1;
        return n + recursiveSum(n - 1);
    }
    public static int formulaSum(int n) {
        return n * (n + 1) / 2;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter natural number: ");
        int n = sc.nextInt();
        if (n < 1) System.out.println("Not a natural number");
        else {
            System.out.println("Recursive Sum: " + recursiveSum(n));
            System.out.println("Formula Sum: " + formulaSum(n));
        }
    }
}

// 3. Leap Year
class LeapYear {
    public static boolean isLeapYear(int year) {
        return year >= 1582 && ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0));
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter year: ");
        int year = sc.nextInt();
        System.out.println(isLeapYear(year) ? "Leap Year" : "Not a Leap Year");
    }
}

// 4, 5, 6. Unit Converter Utility
class UnitConverter {
    public static double convertKmToMiles(double km) { return km * 0.621371; }
    public static double convertMilesToKm(double miles) { return miles * 1.60934; }
    public static double convertMetersToFeet(double meters) { return meters * 3.28084; }
    public static double convertFeetToMeters(double feet) { return feet * 0.3048; }
    public static double convertYardsToFeet(double yards) { return yards * 3; }
    public static double convertFeetToYards(double feet) { return feet * 0.333333; }
    public static double convertMetersToInches(double meters) { return meters * 39.3701; }
    public static double convertInchesToMeters(double inches) { return inches * 0.0254; }
    public static double convertInchesToCm(double inches) { return inches * 2.54; }
    public static double convertFahrenheitToCelsius(double f) { return (f - 32) * 5 / 9; }
    public static double convertCelsiusToFahrenheit(double c) { return (c * 9 / 5) + 32; }
    public static double convertPoundsToKg(double p) { return p * 0.453592; }
    public static double convertKgToPounds(double kg) { return kg * 2.20462; }
    public static double convertGallonsToLiters(double gal) { return gal * 3.78541; }
    public static double convertLitersToGallons(double lit) { return lit * 0.264172; }
}

// 7. Student Vote Eligibility
class StudentVoteChecker {
    public static boolean canStudentVote(int age) {
        return age >= 0 && age >= 18;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] ages = new int[10];
        for (int i = 0; i < 10; i++) {
            System.out.print("Enter age of student " + (i + 1) + ": ");
            ages[i] = sc.nextInt();
            System.out.println(canStudentVote(ages[i]) ? "Can Vote" : "Cannot Vote");
        }
    }
}

// 8. Youngest and Tallest Friend
class FriendsComparison {
    public static int findIndexOfMin(int[] arr) {
        int min = arr[0], index = 0;
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] < min) { min = arr[i]; index = i; }
        }
        return index;
    }
    public static int findIndexOfMax(int[] arr) {
        int max = arr[0], index = 0;
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] > max) { max = arr[i]; index = i; }
        }
        return index;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] age = new int[3];
        int[] height = new int[3];
        String[] names = {"Amar", "Akbar", "Anthony"};
        for (int i = 0; i < 3; i++) {
            System.out.print("Enter age and height of " + names[i] + ": ");
            age[i] = sc.nextInt();
            height[i] = sc.nextInt();
        }
        System.out.println("Youngest: " + names[findIndexOfMin(age)]);
        System.out.println("Tallest: " + names[findIndexOfMax(height)]);
    }
}

// 9. Array Number Check
class ArrayCheck {
    public static boolean isPositive(int num) { return num >= 0; }
    public static boolean isEven(int num) { return num % 2 == 0; }
    public static int compare(int a, int b) {
        return Integer.compare(a, b);
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] arr = new int[5];
        for (int i = 0; i < 5; i++) {
            System.out.print("Enter number " + (i + 1) + ": ");
            arr[i] = sc.nextInt();
            if (isPositive(arr[i])) {
                System.out.println("Positive and " + (isEven(arr[i]) ? "Even" : "Odd"));
            } else {
                System.out.println("Negative");
            }
        }
        int comp = compare(arr[0], arr[4]);
        System.out.println("First and last comparison: " + (comp == 0 ? "Equal" : (comp < 0 ? "First < Last" : "First > Last")));
    }
}

// 10. BMI Calculator
class BMICalculator {
    public static double calculateBMI(double weight, double heightCm) {
        double heightM = heightCm / 100;
        return weight / (heightM * heightM);
    }
    public static String getBMIStatus(double bmi) {
        if (bmi < 18.5) return "Underweight";
        else if (bmi < 25) return "Normal";
        else if (bmi < 30) return "Overweight";
        else return "Obese";
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        double[][] people = new double[10][3];
        for (int i = 0; i < 10; i++) {
            System.out.print("Enter weight (kg) and height (cm) of person " + (i + 1) + ": ");
            double w = sc.nextDouble(), h = sc.nextDouble();
            people[i][0] = w;
            people[i][1] = h;
            people[i][2] = calculateBMI(w, h);
            System.out.printf("BMI: %.2f, Status: %s\n", people[i][2], getBMIStatus(people[i][2]));
        }
    }
}

// 11. Quadratic Roots
class Quadratic {
    public static double[] findRoots(double a, double b, double c) {
        double delta = b * b - 4 * a * c;
        if (delta < 0) return new double[]{};
        else if (delta == 0) return new double[]{ -b / (2 * a) };
        else {
            double sqrtD = Math.sqrt(delta);
            return new double[]{ (-b + sqrtD) / (2 * a), (-b - sqrtD) / (2 * a) };
        }
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a, b, c: ");
        double a = sc.nextDouble(), b = sc.nextDouble(), c = sc.nextDouble();
        double[] roots = findRoots(a, b, c);
        if (roots.length == 0) System.out.println("No Real Roots");
        else System.out.println("Roots: " + Arrays.toString(roots));
    }
}

// 12. Random 4-digit Numbers
class RandomAnalysis {
    public static int[] generate4DigitRandomArray(int size) {
        int[] arr = new int[size];
        for (int i = 0; i < size; i++) arr[i] = (int)(Math.random() * 9000 + 1000);
        return arr;
    }
    public static double[] findAverageMinMax(int[] arr) {
        int min = arr[0], max = arr[0], sum = 0;
        for (int val : arr) {
            min = Math.min(min, val);
            max = Math.max(max, val);
            sum += val;
        }
        return new double[]{ sum / (double)arr.length, min, max };
    }
    public static void main(String[] args) {
        int[] arr = generate4DigitRandomArray(5);
        System.out.println("Generated: " + Arrays.toString(arr));
        double[] result = findAverageMinMax(arr);
        System.out.printf("Average: %.2f, Min: %.0f, Max: %.0f\n", result[0], result[1], result[2]);
    }
}
